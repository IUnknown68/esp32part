{"version":3,"file":"esp32part.mjs","sources":["../src/constants.ts","../src/PartitionTable.ts","../src/csv.ts"],"sourcesContent":["export const MIN_FLASHSIZE_MB = 2;\nexport const MAX_FLASHSIZE_MB = 32;\n\nexport const MAX_NAME_LEN = 15;\n\nexport const MAX_PARTITION_TABLE_LENGTH = 0xC00;\n// export const MD5_PARTITION_BEGIN = b'\\xEB\\xEB' + b'\\xFF' * 14\nexport const MIN_PARTITION_SIZE = 0x1000;\n\nexport const BLOCK_ALIGNMENT_DATA = 0x1000;\nexport const BLOCK_ALIGNMENT_APP = 0x10000;\n\nexport enum PartitionSize {\n  S1Mb = 1 * 1024 * 1024,\n  S2Mb = 2 * 1024 * 1024,\n  S4Mb = 4 * 1024 * 1024,\n  S8Mb = 8 * 1024 * 1024,\n  S16Mb = 16 * 1024 * 1024,\n  S32Mb = 32 * 1024 * 1024,\n  S64Mb = 64 * 1024 * 1024,\n  S128Mb = 128 * 1024 * 1024,\n}\n\nexport enum PartitionType {\n  app = 0x00,\n  data = 0x01,\n}\n\nexport enum PartitionSubTypeApp {\n  factory = 0x00,\n  ota_0 = 0x10,\n  ota_1 = 0x11,\n  ota_2 = 0x12,\n  ota_3 = 0x13,\n  ota_4 = 0x14,\n  ota_5 = 0x15,\n  ota_6 = 0x16,\n  ota_7 = 0x17,\n  ota_8 = 0x18,\n  ota_9 = 0x19,\n  ota_10 = 0x1a,\n  ota_11 = 0x1b,\n  ota_12 = 0x1c,\n  ota_13 = 0x1d,\n  ota_14 = 0x1e,\n  ota_15 = 0x1f,\n  test = 0x20,\n}\n\nexport enum PartitionSubTypeData {\n  ota = 0x00,\n  phy = 0x01,\n  nvs = 0x02,\n  coredump = 0x03,\n  nvs_keys = 0x04,\n  efuse_em = 0x05,\n  undefined = 0x06,\n  esphttpd = 0x80,\n  fat = 0x81,\n  spiffs = 0x82,\n  littlefs = 0x83,\n}\n\nexport type PartitionSubType = PartitionSubTypeApp | PartitionSubTypeData | number;\n\nexport enum PartitionFlags {\n  encrypted = 1,\n  readonly = 2,\n}\n","import {\n  PartitionSize,\n} from './constants';\n\nclass PartitionTable {\n  static fromCsv(csv: string, maxSize: PartitionSize = PartitionSize.S128Mb)\n    : PartitionTable {\n    const table = new PartitionTable(maxSize);\n    return table;\n  }\n\n  constructor(public maxSize: PartitionSize = PartitionSize.S128Mb) {\n  }\n}\n\nexport default PartitionTable;\n","import {\n  PartitionType,\n  PartitionSubTypeApp,\n  PartitionSubTypeData,\n  PartitionFlags,\n} from './constants';\n\nconst EXPECTED_COLUMNS = 6;\nconst NUMBER_REGEX = /(0x)?([a-f0-9]+)([a-z]?)/i;\n\nexport interface PartitionRecord {\n  name: string;\n  type: PartitionType | number;\n  subType: PartitionSubTypeApp | PartitionSubTypeData;\n  offset: number;\n  size: number;\n  flags: Array<PartitionFlags>;\n}\n\n//------------------------------------------------------------------------------\nexport function parseEnum<T>(\n  value: string,\n  enumType: Record<string, string | number>,\n): T {\n  try {\n    return parseNumber(value.toString()) as T;\n  } catch (err) {\n    const index = Object.keys(enumType).indexOf(value);\n    if (!(index >= 0)) {\n      throw new TypeError(`Invalid enumerable: ${value}.`);\n    }\n    return Object.values(enumType)[index] as T;\n  }\n}\n\n//------------------------------------------------------------------------------\nexport function parseType(value: string) : PartitionType {\n  return parseEnum(value, PartitionType);\n}\n\n//------------------------------------------------------------------------------\nexport function parseSubtypeApp(value: string) : PartitionSubTypeApp {\n  return parseEnum(value, PartitionSubTypeApp);\n}\n\n//------------------------------------------------------------------------------\nexport function parseSubtypeData(value: string) : PartitionSubTypeData {\n  return parseEnum(value, PartitionSubTypeData);\n}\n\n//------------------------------------------------------------------------------\nexport function parseFlag(value: string) : PartitionFlags {\n  return parseEnum(value, PartitionFlags);\n}\n\n//------------------------------------------------------------------------------\nexport function parseNumber(value: string) : number {\n  const m = NUMBER_REGEX.exec(value);\n  if (!m) {\n    throw new TypeError('Not a parsable number.');\n  }\n  // istanbul ignore next\n  const [, prefix, matchedValue, suffix = ''] = m;\n  const num = parseInt(matchedValue, prefix ? 16 : 10);\n  if (Number.isNaN(num)) {\n    throw new TypeError('Parse number failed.');\n  }\n  switch (suffix.toLowerCase()) {\n    case 'm':\n      return num * 1024 * 1024;\n    case 'k':\n      return num * 1024;\n    case '':\n      return num;\n    default:\n      throw new TypeError('Parse number: Invalid suffix.');\n  }\n}\n\n//------------------------------------------------------------------------------\nexport function csvRowToPartition(line : string) : PartitionRecord | null {\n  const trimmed = line.trim();\n  if (trimmed[0] === '#') {\n    return null;\n  }\n\n  const data = line.split(/\\s*,\\s*/);\n  if (data.length === 1 && !data[0].trim()) {\n    // empty line, just ignore\n    return null;\n  }\n\n  if (data.length !== EXPECTED_COLUMNS) {\n    throw new Error(`Invalid csv row: Expected ${EXPECTED_COLUMNS} columns.`);\n  }\n\n  const type = parseType(data[1]);\n  const subType = (type === PartitionType.app)\n    ? parseSubtypeApp(data[2])\n    : parseSubtypeData(data[2]);\n\n  const flagStr = data[5].trim();\n  const flags = flagStr\n    ? flagStr.split(/:/).map(parseFlag)\n    : [];\n\n  return {\n    name: data[0],\n    type,\n    subType,\n    offset: parseNumber(data[3]),\n    size: parseNumber(data[4]),\n    flags,\n  };\n}\n\n//------------------------------------------------------------------------------\nexport function csvToPartitionList(value : string) : any {\n  return value.split(/\\r?\\n/)\n    .map(csvRowToPartition)\n    .filter((line) => !!line);\n}\n"],"names":[],"mappings":"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"}